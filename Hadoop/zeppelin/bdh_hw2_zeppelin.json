{"paragraphs":[{"text":"%md ##Event Statistics using Scala","dateUpdated":"2017-02-05T08:00:32-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/markdown"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485438226068_1268975056","id":"20170126-084346_411967885","result":{"code":"SUCCESS","type":"HTML","msg":"<h2>Event Statistics using Scala</h2>\n"},"dateCreated":"2017-01-26T08:43:46-0500","dateStarted":"2017-02-05T08:00:33-0500","dateFinished":"2017-02-05T08:00:33-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:296"},{"title":"Event Statistics using Scala","text":"// any import statements go here\nimport org.apache.spark.rdd.RDD\nimport org.apache.commons.io.IOUtils\nimport java.text.SimpleDateFormat\nimport java.util.Date\nimport java.net.URL\nimport java.nio.charset.Charset\nimport org.apache.spark.sql._","dateUpdated":"2017-02-05T08:33:34-0500","config":{"enabled":true,"title":false,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485380847851_-354544886","id":"20170125-092928_572765858","dateCreated":"2017-01-25T04:47:27-0500","dateStarted":"2017-02-05T08:33:34-0500","dateFinished":"2017-02-05T08:33:34-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:297"},{"title":"Then, load data. We uploaded the data on S3 for easier loading","text":"// load raw data\n\ndef loadFromUrl(url:String) = \n    sc.parallelize(\n        IOUtils.toString(\n            new URL(url),\n            Charset.forName(\"utf8\")).split(\"\\n\"))\n            \nval events = loadFromUrl(\"https://s3.amazonaws.com/6250bdh-hw/hw2/train/events.csv\")\nval mortality = loadFromUrl(\"https://s3.amazonaws.com/6250bdh-hw/hw2/train/mortality.csv\")\n","dateUpdated":"2017-02-05T08:34:51-0500","config":{"enabled":true,"title":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485380847851_-354544886","id":"20170125-102007_1054430570","dateCreated":"2017-01-25T04:47:27-0500","dateStarted":"2017-02-05T08:34:36-0500","dateFinished":"2017-02-05T08:34:37-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:298"},{"text":"import java.util.Date\n// Define case class\ncase class Event(patientId: String, category: String, event: String, date: java.util.Date, value: Double)\ncase class Mortality(patientId: String, mortality_date:  java.util.Date, label: Double)\n","dateUpdated":"2017-02-05T08:30:25-0500","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"colWidth":12,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485380847852_-356468630","id":"20170125-093656_1081259042","result":{"code":"SUCCESS","type":"TEXT","msg":"\nimport java.util.Date\n\ndefined class Event\n\ndefined class Mortality\n"},"dateCreated":"2017-01-25T04:47:27-0500","dateStarted":"2017-02-05T08:30:25-0500","dateFinished":"2017-02-05T08:30:25-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:299"},{"text":"\n// Define date format\nval dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\")","dateUpdated":"2017-02-05T08:20:48-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1486337308258_2126193705","id":"20170205-182828_2037956217","dateCreated":"2017-02-05T06:28:28-0500","dateStarted":"2017-02-05T08:20:48-0500","dateFinished":"2017-02-05T08:20:49-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:300"},{"text":"\n// Load events & mortality into their corresponding RDD\nval eventsRDD: RDD[Event] = events.map(s=>s.split(\",\")).map(s=>Event(s(0), s(1), s(2),dateFormat.parse(s(3).asInstanceOf[String]), s(4).toDouble))\nval mortalityRDD: RDD[Mortality] = mortality.map(s=>s.split(\",\")).map(s=>Mortality(s(0), dateFormat.parse(s(1).asInstanceOf[String]), s(2).toDouble))","dateUpdated":"2017-02-07T17:55:54-0500","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485380847852_-356468630","id":"20170125-103206_1230836042","dateCreated":"2017-01-25T04:47:27-0500","dateStarted":"2017-02-05T08:32:44-0500","dateFinished":"2017-02-05T08:32:45-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:301"},{"title":"Event count is defined as the number of events recorded for a given patient","text":"def event_count_metrics(eve: RDD[(Event)], mor: RDD[(Mortality)]) : (Double, Double, Double, Double, Double, Double) = {\n    \n    // TODO : Implement this function to return the event count metrics.\n    val avg_dead_event_count = 0.0\n    val max_dead_event_count = 0.0\n    val min_dead_event_count = 0.0\n    val avg_alive_event_count = 0.0\n    val max_alive_event_count = 0.0\n    val min_alive_event_count = 0.0\n    \n    (avg_dead_event_count, max_dead_event_count, min_dead_event_count, avg_alive_event_count, max_alive_event_count, min_alive_event_count)\n}","dateUpdated":"2017-02-05T06:57:34-0500","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"editorMode":"ace/mode/scala","colWidth":12,"title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485380847852_-356468630","id":"20170125-163824_794924019","dateCreated":"2017-01-25T04:47:27-0500","dateStarted":"2017-02-05T06:57:34-0500","dateFinished":"2017-02-05T06:57:35-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:302"},{"title":"Encounter count is defined as the count of unique dates on which a given patient visited the ICU. ","text":"def encounter_count_metrics(eve: RDD[(Event)], mor: RDD[(Mortality)]) : (Double, Double, Double, Double, Double, Double) = {\n    \n    // TODO : Implement this function to return the encounter count metrics.\n    val avg_dead_encounter_count = 0.0\n    val max_dead_encounter_count = 0.0\n    val min_dead_encounter_count = 0.0\n    val avg_alive_encounter_count = 0.0\n    val max_alive_encounter_count = 0.0\n    val min_alive_encounter_count = 0.0\n    \n    (avg_dead_encounter_count, max_dead_encounter_count, min_dead_encounter_count, avg_alive_encounter_count, max_alive_encounter_count, min_alive_encounter_count)\n}","dateUpdated":"2017-02-05T06:57:39-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485441637416_1185738478","id":"20170126-094037_1369751422","dateCreated":"2017-01-26T09:40:37-0500","dateStarted":"2017-02-05T06:57:39-0500","dateFinished":"2017-02-05T06:57:39-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:303"},{"title":"Testing Event Count - Don't change this cell","text":"\nval (avg_dead_event_count, max_dead_event_count, min_dead_event_count, avg_alive_event_count, max_alive_event_count, min_alive_event_countt) = \nevent_count_metrics(eventsRDD, mortalityRDD)","dateUpdated":"2017-02-07T17:56:50-0500","config":{"enabled":true,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"colWidth":12,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485380847852_-356468630","id":"20170125-164106_1373358169","dateCreated":"2017-01-25T04:47:27-0500","dateStarted":"2017-02-05T06:57:41-0500","dateFinished":"2017-02-05T06:57:42-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:304"},{"title":"Populate the correct values in df_events dataframe","text":"case class eventRecord(Average_Event: Double , Max_Event: Double, Min_Event: Double, Mortality: String) \nval df_events = Seq(eventRecord(50.0, 80.0, 20.0, \"Alive\"), eventRecord(100.0, 160.0, 60.0, \"Dead\")).toDF \n\n// TODO - Fill in the correct values of minimum, maximum and average events for Alive and Dead Patients \n//val df_events = Seq(eventRecord(0.0, 0.0, 0.0, \"Alive\"), eventRecord(0.0, 0.0, 0.0, \"Dead\")).toDF\ndf_events.registerTempTable(\"df_events\")\n","dateUpdated":"2017-02-05T06:57:44-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485442256179_-948170344","id":"20170126-095056_275615884","dateCreated":"2017-01-26T09:50:56-0500","dateStarted":"2017-02-05T06:57:44-0500","dateFinished":"2017-02-05T06:57:52-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:305"},{"title":"Plot Event Count Grouped by Dead/Alive","text":"%sql\nselect * from df_events","dateUpdated":"2017-02-05T08:35:36-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"Max_Event","index":1,"aggr":"sum"},{"name":"Average_Event","index":0,"aggr":"sum"},{"name":"Min_Event","index":2,"aggr":"sum"}],"values":[{"name":"Max_Event","index":1,"aggr":"sum"},{"name":"Average_Event","index":0,"aggr":"sum"},{"name":"Min_Event","index":2,"aggr":"sum"}],"groups":[{"name":"Mortality","index":3,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Average_Event","index":0,"aggr":"sum"},"yAxis":{"name":"Max_Event","index":1,"aggr":"sum"}}},"enabled":true,"editorMode":"ace/mode/sql","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485531178229_31773231","id":"20170127-103258_1100387642","dateCreated":"2017-01-27T10:32:58-0500","dateStarted":"2017-02-05T06:58:01-0500","dateFinished":"2017-02-05T06:58:01-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:306"},{"title":"Testing Encounter Count - Don't change any cell starting from this one","text":"val  (avg_dead_encounter_count, max_dead_encounter_count, min_dead_encounter_count, avg_alive_encounter_count, max_alive_encounter_count, min_alive_encounter_count) = encounter_count_metrics(eventsRDD, mortalityRDD)","dateUpdated":"2017-01-27T10:16:29-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"title":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485439122604_268144120","id":"20170126-085842_586212247","dateCreated":"2017-01-26T08:58:42-0500","dateStarted":"2017-01-27T10:16:29-0500","dateFinished":"2017-01-27T10:16:29-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:307"},{"title":"Populate the correct values in df_encounters dataframe","text":"case class encounterRecord(Average_Encounter: Double , Max_Encounter: Double, Min_Encounter: Double, Mortality: String)\n\nval df_encounter = Seq(encounterRecord(50.0, 80.0, 20.0, \"Alive\"), encounterRecord(100.0, 160.0, 60.0, \"Dead\")).toDF \n\n// TODO - Fill in the correct values of minimum, maximum and average events for Alive and Dead Patients \n//val df_encounter = Seq(encounterRecord(0.0, 0.0, 0.0, \"Alive\"), encounterRecord(0.0, 0.0, 0.0, \"Dead\")).toDF\ndf_encounter.registerTempTable(\"df_encounter\")\n","dateUpdated":"2017-02-05T08:35:58-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"title":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485531778568_-206933075","id":"20170127-104258_320884595","dateCreated":"2017-01-27T10:42:58-0500","dateStarted":"2017-01-27T01:29:48-0500","dateFinished":"2017-01-27T01:29:49-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:308"},{"title":"Plot Encounter Count Grouped by Dead/Alive","text":"%sql\nselect * from df_encounter ","dateUpdated":"2017-02-05T08:36:02-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":true,"keys":[{"name":"Max_Encounter","index":1,"aggr":"sum"},{"name":"Average_Encounter","index":0,"aggr":"sum"},{"name":"Min_Encounter","index":2,"aggr":"sum"}],"values":[{"name":"Max_Encounter","index":1,"aggr":"sum"},{"name":"Average_Encounter","index":0,"aggr":"sum"},{"name":"Min_Encounter","index":2,"aggr":"sum"}],"groups":[{"name":"Mortality","index":3,"aggr":"sum"}],"scatter":{"xAxis":{"name":"Average_Encounter","index":0,"aggr":"sum"},"yAxis":{"name":"Max_Encounter","index":1,"aggr":"sum"}}},"enabled":true,"title":true,"editorMode":"ace/mode/sql"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485534707750_1372446883","id":"20170127-113147_1780103981","dateCreated":"2017-01-27T11:31:47-0500","dateStarted":"2017-01-27T01:29:51-0500","dateFinished":"2017-01-27T01:29:51-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:309"},{"text":"","dateUpdated":"2017-01-27T11:33:48-0500","config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1485534817919_1303362292","id":"20170127-113337_1396101507","dateCreated":"2017-01-27T11:33:37-0500","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:310"}],"name":"BDH_HW2_Zeppelin","id":"2C74V1WFF","angularObjects":{"2C28Q8BUF:shared_process":[],"2BZ1CKDFF:shared_process":[],"2BYZ1EGN9:shared_process":[],"2C286FDFF:shared_process":[],"2BZ2QUBQD:shared_process":[],"2BZFBAYGU:shared_process":[],"2BYDN2V1Q:shared_process":[],"2C18QNNJX:shared_process":[],"2BY36DHA1:shared_process":[],"2C17ZF8EF:shared_process":[],"2BZ49KMZ6:shared_process":[],"2BZX6TBAT:shared_process":[],"2BYR5Q114:shared_process":[],"2BYB111UT:shared_process":[],"2C1J7VE5P:shared_process":[],"2C28P3VX2:shared_process":[],"2C277W1H4:shared_process":[],"2BZXA4MX4:shared_process":[]},"config":{"looknfeel":"default"},"info":{}}